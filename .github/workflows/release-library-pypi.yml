name: Generate Python Library & Publish on PYPI

on:
  push:
    branches:
      - master

jobs:
  deploy-patch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip build
          pip install -r requirements.txt

      - name: Get next version
        id: generate_release_tag
        uses: phish108/autotag-action@1.1.53
        with:
          github-token: ${{ secrets.TOKEN_GITHUB}}
          with-v: "true"
          bump: patch

      - name: Update version in setup.py
        run: sed -i 's/VERSION = "0.0.0"/VERSION = "${{ steps.generate_release_tag.outputs.new-tag }}"/g' setup.py

      - name: Build package
        run: python -m build

      - name: Check Output Parameters
        run: |
          echo "Got tag name ${{ steps.generate_release_tag.outputs.new-tag }}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        with:
          tag_name: ${{ steps.generate_release_tag.outputs.new-tag }}
          release_name: Release ${{ steps.generate_release_tag.outputs.new-tag }}

      - name: Upload Release Assets
        id: upload-release-assets
        uses: dwenegar/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
          assets_path: dist/

      - name: Publish package to Custom PYPI
        run: |
          pip install twine
          twine upload --repository-url https://pypi.omni.pro/root/omni-pro/ -u ${{ secrets.DEVPI_USER }} -p ${{ secrets.DEVPI_PASSWORD }} dist/*



#  deploy-minor:
#    runs-on: ubuntu-latest
#    if: github.event_name == 'push' && !contains(github.ref, 'tags/')
#    steps:
#      - name: Checkout branch
#        uses: actions/checkout@v2
#
#      - name: Install Python dependencies
#        run: |
#          python -m pip install --upgrade pip
#          # install your Python dependencies here
#          pip3 install -r requirements.txt
#      - name: Deploy Library on dist folder
#        run: |
#          python setup.py bdist_wheel
#          ls -la dist/
#
#      - name: Get next version
#        id: generate_release_tag
#        uses: phish108/autotag-action@1.1.53
#        with:
#          github-token: ${{ secrets.TOKEN_GITHUB}}
#          with-v: "true"
#          bump: minor
#
#      - name: Check Output Parameters
#        run: |
#          echo "Got tag name ${{ steps.generate_release_tag.outputs.new-tag }}"
#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
#        with:
#          tag_name: ${{ steps.generate_release_tag.outputs.new-tag }}
#          release_name: Release ${{ steps.generate_release_tag.outputs.new-tag }}
#
#      - name: Upload Release Assets
#        id: upload-release-assets
#        uses: dwenegar/upload-release-assets@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
#        with:
#          release_id: ${{ steps.create_release.outputs.id }}
#          assets_path: dist/
